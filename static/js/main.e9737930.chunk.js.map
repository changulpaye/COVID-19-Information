{"version":3,"sources":["components/CountryTable.jsx","components/common/Dashboard.jsx","services/ApiSerivce.js","components/CountryDetails.jsx","components/Header.jsx","App.js","serviceWorker.js","index.js"],"names":["CountryTable","countries","country","valueTemplate","rowData","column","className","field","toLocaleString","responsive","value","sortMode","Column","body","to","header","sortable","todayCases","Dashboard","useState","filtered","setFiltered","setCountries","cases","deaths","recovered","worldData","setWorldData","useEffect","fetchPandemicData","a","axios","get","data","sort","b","handleSearch","query","filter","toLowerCase","startsWith","active","length","spinner","text","type","name","placeholder","id","onChange","e","target","CountryDetails","withRouter","data-toggle","data-target","aria-controls","aria-expanded","aria-label","App","path","component","from","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e9737930.chunk.js","sourcesContent":["import { Column } from \"primereact/components/column/Column\";\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nconst CountryTable = ({ country: countries }) => {\r\n  const valueTemplate = (rowData, column) => {\r\n    return (\r\n      <span className=\"large-font\">\r\n        {rowData[column.field].toLocaleString()}\r\n      </span>\r\n    );\r\n  };\r\n  const newCasesTemplate = (rowData, column) =>\r\n    rowData.todayCases !== 0 ? (\r\n      <span className=\"new-cases\">+{rowData.todayCases.toLocaleString()}</span>\r\n    ) : (\r\n      <span></span>\r\n    );\r\n  const deathTemplate = (rowData, column) => (\r\n    <span className=\"death-cases\">\r\n      {rowData[column.field].toLocaleString()}\r\n    </span>\r\n  );\r\n\r\n  const countryTemplate = (rowData, column) => (\r\n    // <Link to={`details/${rowData[column.field]}`}>{rowData[column.field]}</Link>\r\n    <Link to=\"covid19\">{rowData[column.field]}</Link>\r\n  );\r\n  return (\r\n    <div>\r\n      <DataTable\r\n        responsive={true}\r\n        // selectionMode=\"single\"\r\n        value={countries}\r\n        sortMode=\"multiple\"\r\n        // paginator={true}\r\n        // rows={10}\r\n      >\r\n        <Column\r\n          field=\"country\"\r\n          body={countryTemplate}\r\n          header=\"Country\"\r\n          className=\"font-weight-bold\"\r\n          sortable=\"true\"\r\n        />\r\n        <Column\r\n          field=\"cases\"\r\n          body={valueTemplate}\r\n          header=\"Cases\"\r\n          sortable=\"true\"\r\n        />\r\n        <Column\r\n          field=\"todayCases\"\r\n          body={newCasesTemplate}\r\n          header=\"Today Cases\"\r\n          sortable=\"true\"\r\n        />\r\n        <Column\r\n          field=\"deaths\"\r\n          body={deathTemplate}\r\n          header=\"Total Deaths\"\r\n          sortable=\"true\"\r\n        />\r\n        <Column\r\n          field=\"active\"\r\n          body={valueTemplate}\r\n          header=\"Active Cases\"\r\n          sortable=\"true\"\r\n        />\r\n        <Column\r\n          field=\"recovered\"\r\n          body={valueTemplate}\r\n          header=\"Recovered\"\r\n          sortable=\"true\"\r\n        />\r\n        <Column\r\n          field=\"critical\"\r\n          body={valueTemplate}\r\n          header=\"Critical\"\r\n          sortable=\"true\"\r\n        />\r\n        <Column\r\n          field=\"casesPerOneMillion\"\r\n          body={valueTemplate}\r\n          header=\"Tot Cases/1M\"\r\n          sortable=\"true\"\r\n        />\r\n      </DataTable>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountryTable;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { getAllPandemicData, getPandemicData } from \"../../services/ApiSerivce\";\r\nimport CountryTable from \"../CountryTable\";\r\nimport LoadingOverlay from \"react-loading-overlay\";\r\n\r\nconst Dashboard = () => {\r\n  const [filtered, setFiltered] = useState([]);\r\n  const [countries, setCountries] = useState([]);\r\n  const [worldData, setWorldData] = useState({\r\n    cases: \"\",\r\n    deaths: \"\",\r\n    recovered: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchPandemicData();\r\n  }, []);\r\n\r\n  const fetchPandemicData = async () => {\r\n    const { data: worldData } = await getAllPandemicData();\r\n    const { data } = await getPandemicData();\r\n    data.sort(function(a, b) {\r\n      return b.cases - a.cases;\r\n    });\r\n    setWorldData(worldData);\r\n    setCountries(data);\r\n    setFiltered(data);\r\n  };\r\n\r\n  const handleSearch = async query => {\r\n    if (!query) {\r\n      setFiltered(countries);\r\n    }\r\n    const filtered = countries.filter(data =>\r\n      data.country.toLowerCase().startsWith(query.toLowerCase())\r\n    );\r\n    setFiltered(filtered);\r\n  };\r\n\r\n  return (\r\n    <LoadingOverlay\r\n      active={!countries.length}\r\n      spinner\r\n      text=\"Loading information...\">\r\n      <div className=\"full-height \">\r\n        <div className=\"row ml-3 mr-3 font-weight-bold\">\r\n          <div className=\"col-4 p-2  \">\r\n            <div className=\"alert alert-warning text-center\">\r\n              TOTAL CASES {worldData.cases.toLocaleString()}\r\n            </div>\r\n          </div>\r\n          <div className=\"col-4 p-2 \">\r\n            <div className=\"alert alert-danger text-center\">\r\n              TOTAL DEATHS {worldData.deaths.toLocaleString()}\r\n            </div>\r\n          </div>\r\n          <div className=\"col-4 p-2 \">\r\n            <div className=\"alert alert-success text-center\">\r\n              TOTAL CURED {worldData.recovered.toLocaleString()}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row  ml-2 mr-2\">\r\n          <div className=\"col-md-4\">\r\n            <div className=\"form-group\">\r\n              <div className=\"form-text\">\r\n                <input\r\n                  className=\"form-control\"\r\n                  type=\"text\"\r\n                  name=\"search\"\r\n                  placeholder=\"Search\"\r\n                  id=\"search\"\r\n                  onChange={e => handleSearch(e.target.value)}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"row ml-2 mr-2\">\r\n          <div className=\"col-12\">\r\n            <CountryTable country={filtered} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </LoadingOverlay>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","import axios from \"axios\";\r\n\r\nexport function getPandemicData() {\r\n  return axios.get(\"https://corona.lmao.ninja/countries\");\r\n}\r\n\r\nexport function getAllPandemicData() {\r\n  return axios.get(\"https://corona.lmao.ninja/all\");\r\n}\r\n","import React from \"react\";\r\nconst CountryDetails = () => {\r\n  // const country = useLocation();\r\n  return (\r\n    <div className=\"details-container\">This Page is Under Development!</div>\r\n  );\r\n};\r\n\r\nexport default CountryDetails;\r\n","import React from \"react\";\r\nimport { NavLink, withRouter } from \"react-router-dom\";\r\nconst Header = () => {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n      <NavLink className=\"navbar-brand\" to=\"/\">\r\n        Corona Information\r\n      </NavLink>\r\n      <button\r\n        className=\"navbar-toggler\"\r\n        type=\"button\"\r\n        data-toggle=\"collapse\"\r\n        data-target=\"#navbarText\"\r\n        aria-controls=\"navbarText\"\r\n        aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarText\">\r\n        <ul className=\"navbar-nav mr-auto\">\r\n          <li className=\"nav-item active\">\r\n            {/* <NavLink className=\"nav-link\" to=\"/dashboard\">\r\n              Dashboard\r\n            </NavLink> */}\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <NavLink className=\"nav-link\" to=\"/register\"></NavLink>\r\n          </li>\r\n        </ul>\r\n        <form className=\"form-inline my-2 my-lg-0\">\r\n          <span className=\"design-name\">\r\n            Design & Developed by - Parmeshwar Changulpaye\r\n          </span>\r\n          {/* <AutoComplete\r\n            value={country}\r\n            field=\"country\"\r\n            onChange={e => setCountry(e.value)}\r\n            suggestions={countrySuggestions}\r\n            onClear={() => setFiltered(countries)}\r\n            completeMethod={e => suggestCountries(e)}\r\n          /> */}\r\n          {/* <input\r\n            className=\"form-control mr-sm-2\"\r\n            type=\"search\"\r\n            placeholder=\"Search Country\"\r\n            aria-label=\"Search\"\r\n          /> */}\r\n        </form>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default withRouter(Header);\r\n","import React from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport Dashboard from \"./components/common/Dashboard\";\nimport CountryDetails from \"./components/CountryDetails\";\nimport Header from \"./components/Header\";\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <div>\n        <Switch>\n          <Route path=\"/covid19\" component={Dashboard} />\n          <Route path=\"/details/:countryname\" component={CountryDetails} />\n          <Redirect to=\"/covid19\" from=\"/\" />\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"primeicons/primeicons.css\";\nimport \"primereact/resources/primereact.min.css\";\nimport \"primereact/resources/themes/nova-light/theme.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}